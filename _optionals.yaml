
#================================================================================================
# APACHE2
#================================================================================================
  apache2:
    image: drupal:10-apache
    restart: always
    build:
      context: .
      args:
        - PHP_UPSTREAM_CONTAINER=php-fpm
        - PHP_UPSTREAM_PORT=9000
        - PHP_UPSTREAM_TIMEOUT=60
        - DOCUMENT_ROOT=/var/www/html
    links:
      - workspace-phpfpm
    ports:
      - "8105:80"
      - "8106:443"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./log/apache2:/var/log/apache2                          # volume for config
      - ./data/drupal:/var/www/html                             # volume for data
      - ./data/drupal/sites:/var/www/html/sites
      - ./data/drupal/modules:/var/www/html/modules
      - ./data/drupal/profiles:/var/www/html/profiles
      - ./data/drupal/themes:/var/www/html/themes
    environment:
      - APACHE_VERSION=2.4

### Certbot #########################################
    certbot:
      build:
        context: ./config/certbot
      volumes:
        - ./data/certbot/certs/:/var/certs
        - ./certbot/letsencrypt/:/var/www/letsencrypt
      environment:
        - CN="fake.domain.com"
        - EMAIL="fake.email@gmail.com"
      networks:
        - frontend

### pgAdmin ##############################################
    pgadmin:
      restart: always
      image: dpage/pgadmin4:latest
      environment:
        - "PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}"
        - "PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}"
      ports:
        - "${PGADMIN_PORT}:80"
      volumes:
        - ${DATA_PATH_HOST}/pgadmin:/var/lib/pgadmin
      depends_on:
        - postgres
      networks:
        - frontend
        - backend

### phpMyAdmin ###########################################
    phpmyadmin:
      restart: always
      build: ./config/phpmyadmin
      environment:
        - PMA_ARBITRARY=1
        - MYSQL_USER=${PMA_USER}
        - MYSQL_PASSWORD=${PMA_PASSWORD}
        - MYSQL_ROOT_PASSWORD=${PMA_ROOT_PASSWORD}
        - MAX_EXECUTION_TIME=${PMA_MAX_EXECUTION_TIME}
        - MEMORY_LIMIT=${PMA_MEMORY_LIMIT}
        - UPLOAD_LIMIT=${PMA_UPLOAD_LIMIT}
      ports:
        - "${PMA_PORT}:80"
      depends_on:
        - "${PMA_DB_ENGINE}"
      networks:
        - frontend
        - backend

#================================================================================================
# WORKSPACE PHP-FPM
#================================================================================================
  workspace-phpfpm:
    restart: always
    image: dockerframework/workspace-phpfpm:latest
    ports:
      - "8901:80"
      - "8902:9090"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./config/php/php-fpm.conf:/usr/local/etc/php-fpm.conf                       # config path
      - ./config/php/php.ini:/usr/local/etc/php/php.ini                             # ini path
      - ./config/php/laradock-php-ext-xdebug.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini    # xdebug config
      - ./log/phpfpm:/var/log/phpfpm                                                # log phpfpm
      - ./vendor/composer.phar:/usr/local/bin/composer                              # vendor composer
      - ./vendor/deployer.phar:/usr/local/bin/dep                                   # vendor deployer
      - ./vendor/php-cs-fixer:/usr/local/bin/php-cs-fixer                           # vendor php-cs-fixer
      - ./data/drupal:/var/www/html                                                 # volume for data
    environment:
      - NODE_VERSION=10.0.0
      - YARN_VERSION=1.6.0

### SWAGGER EDITOR ############################################
    swagger-editor:
      build: ./config/swagger-editor
      ports:
        - ${SWAGGER_EDITOR_PORT}:8080
      networks:
        - backend

### SWAGGER UI ################################################
    swagger-ui:
      build: ./config/swagger-ui
      environment:
        - API_URL=${SWAGGER_API_URL}
      ports:
        - ${SWAGGER_UI_PORT}:8080
      networks:
        - backend

### MongoWebUI ################################################
    mongo-webui:
      restart: always
      build:
        context: ./config/mongo-webui
      environment:
        - ROOT_URL=${MONGO_WEBUI_ROOT_URL}
        - MONGO_URL=${MONGO_WEBUI_MONGO_URL}
        - INSTALL_MONGO=${MONGO_WEBUI_INSTALL_MONGO}
      volumes:
        - ${DATA_PATH_HOST}/mongo-webui:/data/db
      ports:
        - "${MONGO_WEBUI_PORT}:3000"
      networks:
        - backend
      depends_on:
        - mongo

### Laravel Echo Server #######################################
    laravel-echo-server:
      restart: always
      build:
        context: ./config/laravel-echo-server
        args:
          - CHANGE_SOURCE=${CHANGE_SOURCE}
      volumes:
        - ./laravel-echo-server/laravel-echo-server.json:/app/laravel-echo-server.json:ro
      ports:
        - "${LARAVEL_ECHO_SERVER_PORT}:6001"
      links:
        - redis
      networks:
        - frontend
        - backend

### Laravel Horizon ############################################
    laravel-horizon:
      restart: always
      build:
        context: ./config/laravel-horizon
        args:
          - CHANGE_SOURCE=${CHANGE_SOURCE}
          - LARADOCK_PHP_VERSION=${PHP_VERSION}
          - INSTALL_BZ2=${LARAVEL_HORIZON_INSTALL_BZ2}
          - INSTALL_GD=${LARAVEL_HORIZON_INSTALL_GD}
          - INSTALL_GMP=${LARAVEL_HORIZON_INSTALL_GMP}
          - INSTALL_GNUPG=${LARAVEL_HORIZON_INSTALL_GNUPG}
          - INSTALL_LDAP=${LARAVEL_HORIZON_INSTALL_LDAP}
          - INSTALL_IMAGEMAGICK=${LARAVEL_HORIZON_INSTALL_IMAGEMAGICK}
          - INSTALL_PGSQL=${PHP_FPM_INSTALL_PGSQL}
          - INSTALL_ZIP_ARCHIVE=${LARAVEL_HORIZON_INSTALL_ZIP_ARCHIVE}
          - INSTALL_BCMATH=${PHP_FPM_INSTALL_BCMATH}
          - INSTALL_MEMCACHED=${PHP_FPM_INSTALL_MEMCACHED}
          - INSTALL_SOCKETS=${LARAVEL_HORIZON_INSTALL_SOCKETS}
          - INSTALL_YAML=${LARAVEL_HORIZON_INSTALL_YAML}
          - INSTALL_CASSANDRA=${LARAVEL_HORIZON_INSTALL_CASSANDRA}
          - INSTALL_PHPREDIS=${LARAVEL_HORIZON_INSTALL_PHPREDIS}
          - INSTALL_MONGO=${LARAVEL_HORIZON_INSTALL_MONGO}
          - INSTALL_FFMPEG=${LARAVEL_HORIZON_INSTALL_FFMPEG}
          - INSTALL_AUDIOWAVEFORM=${LARAVEL_HORIZON_INSTALL_AUDIOWAVEFORM}
          - INSTALL_POPPLER_UTILS=${LARAVEL_HORIZON_INSTALL_POPPLER_UTILS}
          - PUID=${LARAVEL_HORIZON_PUID}
          - PGID=${LARAVEL_HORIZON_PGID}
          - IMAGEMAGICK_VERSION=${LARAVEL_HORIZON_IMAGEMAGICK_VERSION}
      volumes:
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
        - ./laravel-horizon/supervisord.d:/etc/supervisord.d
      depends_on:
        - workspace
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
      networks:
        - backend

### MongoDB ##############################################
    mongo:
      restart: always
      build: ./config/mongo
      ports:
        - "${MONGODB_PORT}:27017"
      environment:
        - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
        - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
      volumes:
        - ${DATA_PATH_HOST}/mongo:/data/db
        - ${DATA_PATH_HOST}/mongo_config:/data/configdb
      networks:
        - backend

### Neo4j ################################################
    neo4j:
      restart: always
      ports:
          - '7401:7474'
          - '7402:7687'
      environment:
          - NEO4J_AUTH=none
      volumes:
          - ${DATA_PATH_HOST}/neo4j/data:/data
          - ${DATA_PATH_HOST}/neo4j/logs:/logs
      image: 'neo4j:latest'
      networks:
        - backend

### PostgreSQL ###########################################
    postgres:
      restart: always
      build:
        context: ./config/postgres
        args:
          - POSTGRES_VERSION=${POSTGRES_VERSION}
      volumes:
        - ${DATA_PATH_HOST}/postgres:/var/lib/postgresql/data
        - ${POSTGRES_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
      ports:
        - "${POSTGRES_PORT}:5432"
      environment:
        - POSTGRES_DB=${POSTGRES_DB}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - GITLAB_POSTGRES_INIT=${GITLAB_POSTGRES_INIT}
        - GITLAB_POSTGRES_USER=${GITLAB_POSTGRES_USER}
        - GITLAB_POSTGRES_PASSWORD=${GITLAB_POSTGRES_PASSWORD}
        - GITLAB_POSTGRES_DB=${GITLAB_POSTGRES_DB}
        - KEYCLOAK_POSTGRES_INIT=${KEYCLOAK_POSTGRES_INIT}
        - KEYCLOAK_POSTGRES_USER=${KEYCLOAK_POSTGRES_USER}
        - KEYCLOAK_POSTGRES_PASSWORD=${KEYCLOAK_POSTGRES_PASSWORD}
        - KEYCLOAK_POSTGRES_DB=${KEYCLOAK_POSTGRES_DB}
        - JUPYTERHUB_POSTGRES_INIT=${JUPYTERHUB_POSTGRES_INIT}
        - JUPYTERHUB_POSTGRES_USER=${JUPYTERHUB_POSTGRES_USER}
        - JUPYTERHUB_POSTGRES_PASSWORD=${JUPYTERHUB_POSTGRES_PASSWORD}
        - JUPYTERHUB_POSTGRES_DB=${JUPYTERHUB_POSTGRES_DB}
        - SONARQUBE_POSTGRES_INIT=${SONARQUBE_POSTGRES_INIT}
        - SONARQUBE_POSTGRES_DB=${SONARQUBE_POSTGRES_DB}
        - SONARQUBE_POSTGRES_USER=${SONARQUBE_POSTGRES_USER}
        - SONARQUBE_POSTGRES_PASSWORD=${SONARQUBE_POSTGRES_PASSWORD}
        - POSTGRES_CONFLUENCE_INIT=${CONFLUENCE_POSTGRES_INIT}
        - POSTGRES_CONFLUENCE_DB=${CONFLUENCE_POSTGRES_DB}
        - POSTGRES_CONFLUENCE_USER=${CONFLUENCE_POSTGRES_USER}
        - POSTGRES_CONFLUENCE_PASSWORD=${CONFLUENCE_POSTGRES_PASSWORD}
      networks:
        - backend

### pgbackups PostgreSQL ###########################################
    pgbackups:
      image: prodrigestivill/postgres-backup-local
      restart: always
      volumes:
        - ../backup:/backups
      links:
        - postgres
      environment:
        - POSTGRES_HOST={POSTGRES_HOST}
        - POSTGRES_DB=${POSTGRES_DB}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      networks:
        - backend
